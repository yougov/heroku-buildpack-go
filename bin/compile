#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir>

set -eo pipefail

# Go releases for Darwin beginning with 1.2rc1
# have included more than one build, depending
# on the specific version of Mac OS X. Try to
# account for that, but don't try too hard.
# This doesn't affect Heroku builds, it's only
# for testing on Darwin systems.
platext() {
    case $1 in
    go1.0*|go1.1|go1.1.*) return ;;
    esac
    case $(uname|tr A-Z a-z) in
    darwin) printf %s -osx10.8 ;;
    esac
}

mkdir -p "$1" "$2"

BUILDPACK_DIR=$(dirname $(dirname $0))
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)
BIN_DIR=$(cd $(dirname $0); pwd)

export BUILD_DIR CACHE_DIR BIN_DIR

arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
venv=$CACHE_DIR/venv
mkdir -p $CACHE_DIR/pip
python=python2.7
PATH=$BUILDPACK_DIR/$plat/bin:$venv/bin:$PATH

virtualenv() {
    python "$BUILDPACK_DIR/vendor/virtualenv-1.7/virtualenv.py" "$@"
}

if test -f $BUILD_DIR/Godeps
then
    name=$(<$BUILD_DIR/Godeps jq -r .ImportPath)
    ver=$(<$BUILD_DIR/Godeps jq -r .GoVersion)
elif test -d $BUILD_DIR/Godeps
then
    name=$(<$BUILD_DIR/Godeps/Godeps.json jq -r .ImportPath)
    ver=$(<$BUILD_DIR/Godeps/Godeps.json jq -r .GoVersion)
elif test -f $BUILD_DIR/.godir
then
    name=$(cat $BUILD_DIR/.godir)
    if test -f $BUILD_DIR/.gover
    then
        ver=go$(cat $BUILD_DIR/.gover)
    else
        ver=go${GOVERSION:-1.2.1}
    fi
else
    echo >&2 " !     A .godir is required. For instructions:"
    echo >&2 " !     http://mmcgrana.github.io/2012/09/getting-started-with-go-on-heroku"
    exit 1
fi

file=${GOFILE:-$ver.$(uname|tr A-Z a-z)-amd64$(platext $ver).tar.gz}
url=${GOURL:-http://golang.org/dl/$file}

if test -e $BUILD_DIR/bin && ! test -d $BUILD_DIR/bin
then
    echo >&2 " !     File bin exists and is not a directory."
    exit 1
fi

if test -d $CACHE_DIR/$ver/go
then
    echo "-----> Using $ver"
else
    rm -rf $CACHE_DIR/* # be sure not to BUILD_DIR up cruft
    mkdir -p $CACHE_DIR/$ver
    cd $CACHE_DIR/$ver
    echo -n "-----> Installing $ver..."
    curl -sO $url
    tar zxf $file
    rm -f $file
    echo " done"
fi

mkdir -p $BUILD_DIR/bin
GOBIN=$BUILD_DIR/bin export GOBIN
GOROOT=$CACHE_DIR/$ver/go export GOROOT
GOPATH=$BUILD_DIR/.heroku/g export GOPATH
PATH=$GOROOT/bin:$PATH

p=$GOPATH/src/$name
mkdir -p $p
cp -R $BUILD_DIR/* $p

unset GIT_DIR # unset git dir or it will mess with goinstall
cd $p

source $BIN_DIR/steps/hooks/pre_compile

if test -e $BUILD_DIR/Godeps
then
    echo "-----> Running: godep go install -tags heroku ./..."
    godep go install -tags heroku ./...
else
    echo "-----> Running: go get -tags heroku ./..."
    go get -tags heroku ./...
fi

cd $BUILD_DIR
source $BIN_DIR/steps/hooks/post_compile

rm -rf $BUILD_DIR/.heroku

mkdir -p $BUILD_DIR/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $BUILD_DIR/.profile.d/go.sh
